#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY="$(random_string)"
  NODE_LABEL_VALUE="$(random_string)"

  kubectl create namespace "$CLUSTER_NAMESPACE"

  cat <<EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGInstanceProfile
metadata:
  name: size-s
  namespace: $CLUSTER_NAMESPACE
spec:
  cpu: '500m'
  memory: '512Mi'
EOF

  RECONCILIATION_IGNORE_ANNOTATION="stackgres.io/reconciliation-pause"
  DISTRIBUTEDLOGS_NAME="$(get_sgdistributedlogs_name "$CLUSTER_NAME-logs")"
}


e2e_test() {
  run_test "A stackgres cluster with ignore label should not be created" ignore_sgcluster_create

  run_test "A stackgres cluster with ignore label should not be patched" ignore_sgcluster_patch

  run_test "A stackgres cluster without ignore label should be patched" resume_sgcluster_reconciliation

  run_test "A distributed logs cluster with ignore label should not be created" ignore_sgdistributedlogs_create

  run_test "A distributed logs cluster with ignore label should not be patched" ignore_sgdistributedlogs_patch
  
  run_test "A distributed logs cluster without ignore label should be patched" resume_sgdistributedlogs_reconciliation
  
}

ignore_sgcluster_create(){
    cat << EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGCluster
metadata:
  name: $CLUSTER_NAME
  namespace: $CLUSTER_NAMESPACE
  annotations:
    $RECONCILIATION_IGNORE_ANNOTATION: "true"
spec:
  instances: 1
  postgres:
    version: "$E2E_POSTGRES_VERSION"
  pods:
    persistentVolume:
      size: '128Mi'
    scheduling:
      nodeSelector:
        $NODE_LABEL_KEY: $NODE_LABEL_VALUE"
  sgInstanceProfile: 'size-s'
  nonProductionOptions:
    disableClusterPodAntiAffinity: true
EOF

  if wait_until -t "15" has_cluster_generated_resources
  then
    fail "Cluster where created"
  else
    success "Cluster resources wheren't created"
  fi

}

ignore_sgcluster_patch(){
  kubectl annotate sgcluster "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION-"

  wait_until has_cluster_generated_resources

  kubectl annotate sgcluster "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION=true"

  patch_sgcluster_instances "2"

  if wait_until -t "15" eval '[ $(get_cluster_replicas) = 2 ]'
  then
    fail "SGCluster is not being ignored"
  else
    success "SGCluster is being ignored"
  fi
  
}

resume_sgcluster_reconciliation(){
  kubectl annotate sgcluster "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION"-

  if wait_until -t "15" eval '[ $(get_cluster_replicas) = 2 ]'
  then
    success "SGCluster is not being ignored"    
  else
    fail "SGCluster is being ignored"
  fi
}

ignore_sgdistributedlogs_create(){
  cat <<EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGDistributedLogs
metadata:
  name: $DISTRIBUTEDLOGS_NAME
  namespace: $CLUSTER_NAMESPACE
  annotations:
    $RECONCILIATION_IGNORE_ANNOTATION: "true"
spec:
  persistentVolume:
    size: '128Mi'
  nonProductionOptions:
    disableClusterPodAntiAffinity: true
EOF

  if wait_until -t "15" has_logs_generated_resources
  then
    fail "Distributed logs cluster where created"
  else
    success "Distributed logs cluster resources wheren't created"
  fi
}

ignore_sgdistributedlogs_patch(){
  
  kubectl annotate sgdistributedlogs "$DISTRIBUTEDLOGS_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION=false" --overwrite

  wait_until has_logs_generated_resources

  kubectl annotate sgdistributedlogs "$DISTRIBUTEDLOGS_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION=true"  --overwrite

  kubectl patch sts "$DISTRIBUTEDLOGS_NAME" -n "$CLUSTER_NAMESPACE" --type='json' \
    -p='[{"op": "replace", "path": "/spec/replicas", "value": 2}]'

  if wait_until -t "15" eval '[ $(get_sgdistributedlogs_replicas) = 1 ]'
  then
    fail "Distributed logs is not being ignored"
  else
    success "Distributed logs is being ignored"
  fi
}

resume_sgdistributedlogs_reconciliation(){
  kubectl annotate sgdistributedlogs "$DISTRIBUTEDLOGS_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION=false" --overwrite

  if wait_until -t "15" eval '[ $(get_sgdistributedlogs_replicas) = 1 ]'
  then
    success "Distributed logs is not being ignored"    
  else
    fail "Distributed logs is being ignored"
  fi
}

has_logs_generated_resources(){
  kubectl get sts -n "$CLUSTER_NAMESPACE" "$DISTRIBUTEDLOGS_NAME"
}

get_cluster_replicas() {
  kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.replicas}'
}

get_sgdistributedlogs_replicas() {
  kubectl get sts -n "$CLUSTER_NAMESPACE" "$DISTRIBUTEDLOGS_NAME" -o jsonpath='{.spec.replicas}'
}

patch_sgcluster_instances(){
  local DESIRED_INSTANCES="$1"

  SG_INSTANCES="$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.instances}')"

  echo "Current SGCluster instances $SG_INSTANCES, patching to $DESIRED_INSTANCES"

  while [ ! "$SG_INSTANCES" = 2 ]
  do
    kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type='json' \
      -p='[{"op": "replace", "path": "/spec/instances", "value": '"$DESIRED_INSTANCES"'}]'
    
    sleep 10
    SG_INSTANCES="$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.instances}')"
    if [ ! "$SG_INSTANCES" = 2 ]
    then
      echo "Patch not applied... retrying"
      sleep 1
    fi
  done

}